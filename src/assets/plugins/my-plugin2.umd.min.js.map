{"version":3,"sources":["ng://my-plugin2/lib/my-plugin2.service.ts","ng://my-plugin2/lib/mycommand-interface.ts","ng://my-plugin2/lib/my-plugin2.component.ts","ng://my-plugin2/lib/dialog/dialog.component.ts","ng://my-plugin2/lib/my-plugin2.module.ts"],"names":["MyPlugin2Service","Injectable","args","providedIn","MyCommandInterface","this","onOpenDialog","EventEmitter","prototype","beginCommand","event","_this","emit","onCloseDialog","Observable","create","observer","subscribe","result","next","complete","beginAction","of","beginItem","endCommand","endAction","endItem","MyPlugin2Component","pluginManager","dialog","ci","display","openDialog","ngOnInit","registerCommandInterface","onClose","console","log","Component","selector","template","PluginManagerService","MatDialog","DialogComponent","MyPlugin2Module","NgModule","declarations","imports","MatDialogModule","MatButtonModule","DialogModule","exports","entryComponents"],"mappings":"8bAAA,IAAAA,EAAA,WAOE,SAAAA,gCALDC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,sJAHd,GCKAC,EAAA,WAMI,SAAAA,IAHAC,KAAAC,aAAe,IAAIC,EAAAA,aAiDvB,OA3CIH,EAAAI,UAAAC,aAAA,SAAaC,GAAb,IAAAC,EAAAN,KAKI,OAHAA,KAAKC,aAAaM,KAAKF,GACvBL,KAAKQ,cAAgB,IAAIN,EAAAA,aAElBO,EAAAA,WAAWC,OAAO,SAAAC,GAErBL,EAAKE,cAAcI,UAAU,SAAAC,GAEzBF,EAASG,KAAKD,GACdF,EAASI,gBAIrBhB,EAAAI,UAAAa,YAAA,SAAYX,GACR,OAAOY,EAAAA,GAAGZ,IAEdN,EAAAI,UAAAe,UAAA,SAAUb,GAAV,IAAAC,EAAAN,KAKI,OAHAA,KAAKC,aAAaM,KAAKF,GACvBL,KAAKQ,cAAgB,IAAIN,EAAAA,aAElBO,EAAAA,WAAWC,OAAO,SAAAC,GAErBL,EAAKE,cAAcI,UAAU,SAAAC,GAEzBF,EAASG,KAAKD,GACdF,EAASI,gBAKrBhB,EAAAI,UAAAgB,WAAA,SAAWd,GACP,OAAOY,EAAAA,GAAGZ,IAEdN,EAAAI,UAAAiB,UAAA,SAAUf,GACN,OAAOY,EAAAA,GAAGZ,IAEdN,EAAAI,UAAAkB,QAAA,SAAQhB,GACJ,OAAOY,EAAAA,GAAGZ,IAIlBN,EApDA,GCLAuB,EAAA,WAqBE,SAAAA,EAAoBC,EAA6CC,GAAjE,IAAAlB,EAAAN,KAAoBA,KAAAuB,cAAAA,EAA6CvB,KAAAwB,OAAAA,EAJzDxB,KAAAyB,GAAK,IAAI1B,EACjBC,KAAA0B,SAAU,EAIR1B,KAAKyB,GAAGxB,aAAaW,UAAU,SAAAP,GAC7BC,EAAKD,MAAQA,EACbC,EAAKqB,eAmBX,OAhBEL,EAAAnB,UAAAyB,SAAA,WACE5B,KAAKuB,cAAcM,yBAAyB7B,KAAKyB,KAGnDH,EAAAnB,UAAAwB,WAAA,WACE3B,KAAK0B,SAAU,GAGjBJ,EAAAnB,UAAA2B,QAAA,WACEC,QAAQC,IAAI,mBACZhC,KAAKyB,GAAGjB,cAAcD,KAAKP,KAAKK,4BA9BnC4B,EAAAA,UAASpC,KAAA,CAAC,CACTqC,SAAU,iBACVC,SAAU,uKARHC,EAAAA,4BAEAC,EAAAA,aAwCTf,EA3CA,GCAAgB,EAAA,WASE,SAAAA,KAKF,OAHEA,EAAAnC,UAAAyB,SAAA,iCATDK,EAAAA,UAASpC,KAAA,CAAC,CACTqC,SAAU,aACVC,SAAA,qFAUFG,EAdA,GCAAC,EAAA,WAMA,SAAAA,KAQ+B,2BAR9BC,EAAAA,SAAQ3C,KAAA,CAAC,CACR4C,aAAc,CAACnB,EAAoBgB,GACnCI,QAAS,CACPC,EAAAA,gBAAiBC,EAAAA,gBAAiBC,EAAAA,cAEpCC,QAAS,CAACxB,EAAoBgB,GAC9BS,gBAAiB,CAAET,OAEUC,EAd/B","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MyPlugin2Service {\n\n  constructor() { }\n}\n","import { ICommands, CommandEvent, EventAction } from 'ui-api';\r\nimport { Observable, of, BehaviorSubject, Subject } from 'rxjs';\r\nimport { delay } from 'rxjs/operators';\r\nimport { EventEmitter } from '@angular/core';\r\n\r\nexport class MyCommandInterface implements ICommands {\r\n    interfaceId: string;\r\n\r\n    onOpenDialog = new EventEmitter<CommandEvent>();\r\n    onCloseDialog: EventEmitter<CommandEvent>;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    beginCommand(event: CommandEvent): Observable<CommandEvent> {\r\n        // Open dialog\r\n        this.onOpenDialog.emit(event);\r\n        this.onCloseDialog = new EventEmitter<CommandEvent>();\r\n        // create and return an observable to wait for the close dialog event.\r\n        return Observable.create(observer => {\r\n            // subscribe to the onCloseDialog event\r\n            this.onCloseDialog.subscribe(result => {\r\n                // emit result to the observer and complete it.\r\n                observer.next(result);\r\n                observer.complete();\r\n            });\r\n        });\r\n    }\r\n    beginAction(event: CommandEvent): Observable<CommandEvent> {\r\n        return of(event);\r\n    }\r\n    beginItem(event: CommandEvent): Observable<CommandEvent> {\r\n        // Open dialog\r\n        this.onOpenDialog.emit(event);\r\n        this.onCloseDialog = new EventEmitter<CommandEvent>();\r\n        // create and return an observable to wait for the close dialog event.\r\n        return Observable.create(observer => {\r\n            // subscribe to the onCloseDialog event\r\n            this.onCloseDialog.subscribe(result => {\r\n                // emit result to the observer and complete it.\r\n                observer.next(result);\r\n                observer.complete();\r\n            });\r\n        });\r\n    }\r\n\r\n    endCommand(event: CommandEvent): Observable<CommandEvent> {\r\n        return of(event);\r\n    }\r\n    endAction(event: CommandEvent): Observable<CommandEvent> {\r\n        return of(event);\r\n    }\r\n    endItem(event: CommandEvent): Observable<CommandEvent> {\r\n        return of(event);\r\n    }\r\n\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport { PluginManagerService, CommandEvent, EventAction, ApiTypes } from 'ui-api';\nimport { MyCommandInterface } from './mycommand-interface';\nimport { MatDialog } from '@angular/material';\nimport { DialogComponent } from './dialog/dialog.component';\nimport { MyPlugin2Service } from './my-plugin2.service';\n\n@Component({\n  selector: 'lib-my-plugin2',\n  template: `\n  <p-dialog header=\"Title\" [(visible)]=\"display\" (onHide)=\"onClose()\" [modal]=\"true\">\n    Content\n  </p-dialog>\n  `,\n  styles: []\n})\nexport class MyPlugin2Component implements OnInit {\n  private ci = new MyCommandInterface();\n  display = false;\n  event: CommandEvent;\n\n  constructor(private pluginManager: PluginManagerService, private dialog: MatDialog) {\n    this.ci.onOpenDialog.subscribe(event => {\n      this.event = event;\n      this.openDialog();\n    });\n  }\n  ngOnInit() {\n    this.pluginManager.registerCommandInterface(this.ci);\n  }\n\n  openDialog() {\n    this.display = true;\n  }\n\n  onClose() {\n    console.log('on close called');\n    this.ci.onCloseDialog.emit(this.event);\n  }\n\n\n\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-dialog',\n  templateUrl: './dialog.component.html',\n  styleUrls: ['./dialog.component.css']\n})\nexport class DialogComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { MyPlugin2Component } from './my-plugin2.component';\nimport { DialogComponent } from './dialog/dialog.component';\nimport { MatDialogModule, MatButtonModule } from '@angular/material';\nimport { DialogModule } from 'primeng/dialog';\n\n@NgModule({\n  declarations: [MyPlugin2Component, DialogComponent],\n  imports: [\n    MatDialogModule, MatButtonModule, DialogModule\n  ],\n  exports: [MyPlugin2Component, DialogComponent],\n  entryComponents: [ DialogComponent ]\n})\nexport class MyPlugin2Module { }\n"]}